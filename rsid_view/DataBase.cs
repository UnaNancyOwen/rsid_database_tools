/*
 This is utility to database from files that generated by realsense id viewer (host mode).
 This utility is simplified re-implementation based on sample program.
 This utility supports following features.

 var database = new rsid_utility.DataBase(); // Create DataBase

 database.LoadDirectory("./database/");      // Load DataBase from All Files included in Directory
 database.LoadDirectory("./db");             // Load DataBase from File
 var db = database.GetDataBase();            // Get DataBase
 foreach ((Faceprints faceprints, string user_id) in db)
 {
    Console.WriteLine(user_id);
 }

 database.SaveFile();                        // Save DataBase to One File
 database.SaveEachFiles();                   // Save DtaBase to Each User Files

 database.Add(faceprints, "user_id");        // Add FacePrints to DataBase
 database.Distinct();                        // Remove Duplicated Users from DataBase
 database.Remove("user_id");                 // Remove User from DataBase
 database.Clear();                           // Clear DataBase

 Copyright (c) 2021 Tsukasa Sugiura <t.sugiura0204@gmail.com>

 Licensed under the MIT license.
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 // Original License: Apache 2.0.
 // Copyright(c) 2020-2021 Intel Corporation. All Rights Reserved.
 // https://github.com/IntelRealSense/RealSenseID/blob/master/LICENSE
*/

using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.Serialization.Formatters.Binary;
using rsid;

namespace rsid_utility
{
    class DataBase
    {
        private List<(Faceprints, string)> db = new List<(Faceprints, string)>(); // RealSense ID Viewer Format

        public void LoadDirectory(string input_dir)
        {
            if (!Directory.Exists(input_dir))
            {
                throw new Exception("failed not exists database directory!");
            }

            const string extension = "";
            var files = Directory.GetFiles(input_dir, "*" + extension);
            if (files.Count() < 1)
            {
                throw new Exception("failed not exists database files!");
            }

            try
            {
                foreach (var file in files)
                {
                    var bf = new BinaryFormatter();
                    using(var fs = new FileStream(file, FileMode.Open))
                    {
                        var data_list = new List<(Faceprints, string)>();
                        data_list = bf.Deserialize(fs) as List<(Faceprints, string)>;
                        db.AddRange(data_list);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        public void LoadFile(string input_file)
        {
            if (!File.Exists(input_file))
            {
                throw new Exception("failed not exists database file!");
            }

            try{
                var bf = new BinaryFormatter();
                using(var fs = new FileStream(input_file, FileMode.Open))
                {
                    var data_list = new List<(Faceprints, string)>();
                    data_list = bf.Deserialize(fs) as List<(Faceprints, string)>;
                    db.AddRange(data_list);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        public void SaveFile(string output_dir = "", string file_name = "")
        {
            if (db.Count == 0){
                throw new Exception("failed database is emptry!");
            }

            if (output_dir == null || output_dir == "")
            {
                output_dir = Directory.GetCurrentDirectory();
            }

            if (!output_dir.EndsWith(Path.DirectorySeparatorChar))
            {
                output_dir += Path.DirectorySeparatorChar;
            }

            if (file_name == null || file_name == "")
            {
                file_name = "db";
            }

            try{
                Directory.CreateDirectory(Path.GetDirectoryName(output_dir));
                var name = file_name;
                var path = Path.Combine(output_dir, name);
                var bf = new BinaryFormatter();
                using(var fs = new FileStream(path, FileMode.Create))
                {
                    bf.Serialize(fs, db);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        public void SaveEachFiles(string output_dir = "")
        {
            if (db.Count == 0){
                throw new Exception("failed database is emptry!");
            }

            if (output_dir == null || output_dir == "")
            {
                output_dir = Directory.GetCurrentDirectory();
            }

            if (!output_dir.EndsWith(Path.DirectorySeparatorChar))
            {
                output_dir += Path.DirectorySeparatorChar;
            }

            try
            {
                Directory.CreateDirectory(Path.GetDirectoryName(output_dir));
                foreach (var data in db)
                {
                    var name = data.Item2.Replace(" ", "_").ToLower();
                    char[] invalid_chars = Path.GetInvalidFileNameChars();
                    name = invalid_chars.Aggregate(name, (name, invalid_char) => name.Replace(invalid_char.ToString(), ""));
                    var path = Path.Combine(output_dir, name);
                    var bf = new BinaryFormatter();
                    using(var fs = new FileStream(path, FileMode.Create))
                    {
                        bf.Serialize(fs, db);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        public void Add(Faceprints faceprints, string user_id)
        {
            db.Add((faceprints, user_id));
        }

        public void Distinct()
        {
            var remove_indices = new List<int>();
            for (var i = 0; i < db.Count; i++)
            {
                var user_id = db[i].Item2;
                for (var j = i; j < db.Count; j++)
                {
                    if (user_id == db[j].Item2)
                    {
                        remove_indices.Add(j);
                    }
                }
            }

            foreach (var remove_index in remove_indices)
            {
                db.RemoveAt(remove_index);
            }
        }

        public void Remove(string user_id)
        {
            Console.WriteLine(db.RemoveAll(data => data.Item2.Contains(user_id)));
        }

        public void Clear()
        {
            db.Clear();
        }

        public List<(Faceprints, string)> GetDataBase()
        {
            return db;
        }
    }
}
